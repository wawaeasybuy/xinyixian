{"version":3,"sources":["../../../client/components/socket/socket.service.js"],"names":[],"mappings":";AACA;;AAEA,QAAQ,MAAR,CAAe,cAAf,EACG,OADH,CACW,QADX,EACqB,UAAS,aAAT,EAAwB;;;AAGzC,MAAI,WAAW,GAAG,EAAH,EAAO;;;AAGpB,UAAM,mBAAN;GAHa,CAAX,CAHqC;;AASzC,MAAI,SAAS,cAAc;AACzB,cAAU,QAAV;GADW,CAAT,CATqC;;AAazC,SAAO;AACL,YAAQ,MAAR;;;;;;;;;;;;AAYA,iBAAa,UAAU,SAAV,EAAqB,KAArB,EAA4B,EAA5B,EAAgC;AAC3C,WAAK,MAAM,QAAQ,IAAR;;;;;AADgC,YAM3C,CAAO,EAAP,CAAU,YAAY,OAAZ,EAAqB,UAAU,IAAV,EAAgB;AAC7C,YAAI,UAAU,EAAE,IAAF,CAAO,KAAP,EAAc,EAAC,KAAK,KAAK,GAAL,EAApB,CAAV,CADyC;AAE7C,YAAI,QAAQ,MAAM,OAAN,CAAc,OAAd,CAAR,CAFyC;AAG7C,YAAI,QAAQ,SAAR;;;;AAHyC,YAOzC,OAAJ,EAAa;AACX,gBAAM,MAAN,CAAa,KAAb,EAAoB,CAApB,EAAuB,IAAvB,EADW;AAEX,kBAAQ,SAAR,CAFW;SAAb,MAGO;AACL,gBAAM,IAAN,CAAW,IAAX,EADK;SAHP;;AAOA,WAAG,KAAH,EAAU,IAAV,EAAgB,KAAhB,EAd6C;OAAhB,CAA/B;;;;;AAN2C,YA0B3C,CAAO,EAAP,CAAU,YAAY,SAAZ,EAAuB,UAAU,IAAV,EAAgB;AAC/C,YAAI,QAAQ,SAAR,CAD2C;AAE/C,UAAE,MAAF,CAAS,KAAT,EAAgB,EAAC,KAAK,KAAK,GAAL,EAAtB,EAF+C;AAG/C,WAAG,KAAH,EAAU,IAAV,EAAgB,KAAhB,EAH+C;OAAhB,CAAjC,CA1B2C;KAAhC;;;;;;;AAsCb,mBAAe,UAAU,SAAV,EAAqB;AAClC,aAAO,kBAAP,CAA0B,YAAY,OAAZ,CAA1B,CADkC;AAElC,aAAO,kBAAP,CAA0B,YAAY,SAAZ,CAA1B,CAFkC;KAArB;GAnDjB,CAbyC;CAAxB,CADrB","file":"socket.service.js","sourcesContent":["/* global io */\n'use strict';\n\nangular.module('xinyixianApp')\n  .factory('socket', function(socketFactory) {\n\n    // socket.io now auto-configures its connection when we ommit a connection url\n    var ioSocket = io('', {\n      // Send auth token on connection, you will need to DI the Auth service above\n      // 'query': 'token=' + Auth.getToken()\n      path: '/socket.io-client'\n    });\n\n    var socket = socketFactory({\n      ioSocket: ioSocket\n    });\n\n    return {\n      socket: socket,\n\n      /**\n       * Register listeners to sync an array with updates on a model\n       *\n       * Takes the array we want to sync, the model name that socket updates are sent from,\n       * and an optional callback function after new items are updated.\n       *\n       * @param {String} modelName\n       * @param {Array} array\n       * @param {Function} cb\n       */\n      syncUpdates: function (modelName, array, cb) {\n        cb = cb || angular.noop;\n\n        /**\n         * Syncs item creation/updates on 'model:save'\n         */\n        socket.on(modelName + ':save', function (item) {\n          var oldItem = _.find(array, {_id: item._id});\n          var index = array.indexOf(oldItem);\n          var event = 'created';\n\n          // replace oldItem if it exists\n          // otherwise just add item to the collection\n          if (oldItem) {\n            array.splice(index, 1, item);\n            event = 'updated';\n          } else {\n            array.push(item);\n          }\n\n          cb(event, item, array);\n        });\n\n        /**\n         * Syncs removed items on 'model:remove'\n         */\n        socket.on(modelName + ':remove', function (item) {\n          var event = 'deleted';\n          _.remove(array, {_id: item._id});\n          cb(event, item, array);\n        });\n      },\n\n      /**\n       * Removes listeners for a models updates on the socket\n       *\n       * @param modelName\n       */\n      unsyncUpdates: function (modelName) {\n        socket.removeAllListeners(modelName + ':save');\n        socket.removeAllListeners(modelName + ':remove');\n      }\n    };\n  });\n"]}