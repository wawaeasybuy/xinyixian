{"version":3,"sources":["../../client/app/app.js"],"names":[],"mappings":";AACA,IAAI,UAAQ,CAAR;AACJ,QAAQ,MAAR,CAAe,cAAf,EAA+B,CAC7B,WAD6B,EAE7B,YAF6B,EAG7B,YAH6B,EAI7B,kBAJ6B,EAK7B,WAL6B,EAM7B,cAN6B,CAA/B,EAQG,MARH,CAQU,UAAU,cAAV,EAA0B,kBAA1B,EAA8C,iBAA9C,EAAiE,aAAjE,EAAgF;AACtF,qBACG,SADH,CACa,GADb,EADsF;;AAItF,oBAAkB,SAAlB,CAA4B,IAA5B,EAJsF;AAKtF,gBAAc,YAAd,CAA2B,IAA3B,CAAgC,iBAAhC,EALsF;CAAhF,CARV,CAgBG,OAhBH,CAgBW,iBAhBX,EAgB8B,UAAU,UAAV,EAAsB,EAAtB,EAA0B,YAA1B,EAAwC,SAAxC,EAAmD;AAC7E,SAAO;;AAEL,aAAS,UAAU,MAAV,EAAkB;AACzB,aAAO,OAAP,GAAiB,OAAO,OAAP,IAAkB,EAAlB,CADQ;AAEzB,UAAI,aAAa,GAAb,CAAiB,OAAjB,CAAJ,EAA+B;AAC7B,eAAO,OAAP,CAAe,aAAf,GAA+B,YAAY,aAAa,GAAb,CAAiB,OAAjB,CAAZ,CADF;OAA/B;AAGA,aAAO,MAAP,CALyB;KAAlB;;;AAST,mBAAe,UAAS,QAAT,EAAmB;AAChC,UAAG,SAAS,MAAT,KAAoB,GAApB,EAAyB;AAC1B,kBAAU,IAAV,CAAe,QAAf;;AAD0B,oBAG1B,CAAa,MAAb,CAAoB,OAApB,EAH0B;AAI1B,eAAO,GAAG,MAAH,CAAU,QAAV,CAAP,CAJ0B;OAA5B,MAMK;AACH,eAAO,GAAG,MAAH,CAAU,QAAV,CAAP,CADG;OANL;KADa;GAXjB,CAD6E;CAAnD,CAhB9B,CA0CG,GA1CH,CA0CO,UAAU,UAAV,EAAsB,SAAtB,EAAiC,IAAjC,EAAsC,MAAtC,EAA8C;;AAEjD,aAAW,GAAX,CAAe,mBAAf,EAAoC,UAAU,KAAV,EAAiB,IAAjB,EAAuB;AACzD,SAAK,eAAL,CAAqB,UAAS,QAAT,EAAmB;;AAEtC,UAAG,CAAC,QAAD,EAAU;AACX,aAAK,KAAL,CAAW,EAAC,OAAM,qBAAN,EAA4B,UAAS,SAAT,EAAxC,EAA4D,YAAU,EAAV,CAA5D,CADW;OAAb;;AAFsC,KAAnB,CAArB,CADyD;GAAvB,CAApC,CAFiD;CAA9C,CA1CP","file":"app.js","sourcesContent":["// 'use strict';\nvar testNum=0;\nangular.module('xinyixianApp', [\n  'ngCookies',\n  'ngResource',\n  'ngSanitize',\n  'btford.socket-io',\n  'ui.router',\n  'ngFileUpload'\n])\n  .config(function ($stateProvider, $urlRouterProvider, $locationProvider, $httpProvider) {\n    $urlRouterProvider\n      .otherwise('/');\n\n    $locationProvider.html5Mode(true);\n    $httpProvider.interceptors.push('authInterceptor');\n  })\n\n  .factory('authInterceptor', function ($rootScope, $q, $cookieStore, $location) {\n    return {\n      // Add authorization token to headers\n      request: function (config) {\n        config.headers = config.headers || {};\n        if ($cookieStore.get('token')) {\n          config.headers.Authorization = 'Bearer ' + $cookieStore.get('token');\n        }\n        return config;\n      },\n\n      // Intercept 401s and redirect you to login\n      responseError: function(response) {\n        if(response.status === 401) {\n          $location.path('/login');\n          // remove any stale tokens\n          $cookieStore.remove('token');\n          return $q.reject(response);\n        }\n        else {\n          return $q.reject(response);\n        }\n      }\n    };\n  })\n\n  .run(function ($rootScope, $location, Auth,$state) {\n    // Redirect to login if route requires auth and you're not logged in\n    $rootScope.$on('$stateChangeStart', function (event, next) {\n      Auth.isLoggedInAsync(function(loggedIn) {\n        //若没有登录，则使用游客身份登录\n        if(!loggedIn){\n          Auth.login({email:'tourist@tourist.com',password:'tourist'},function(){\n\n          });\n        }\n        // $location.path('/show/home/view');\n      });\n    });\n  });\n"]}