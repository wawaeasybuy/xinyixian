{"version":3,"sources":["../../client/app/app.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,CAC7B,WAAW,EACX,YAAY,EACZ,YAAY,EACZ,kBAAkB,EAClB,WAAW,EACX,cAAc,CACf,CAAC,CACC,MAAM,CAAC,UAAU,cAAc,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,aAAa,EAAE;AACtF,oBAAkB,CACf,SAAS,CAAC,GAAG,CAAC,CAAC;;AAElB,mBAAiB,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;AAClC,eAAa,CAAC,YAAY,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;CACpD,CAAC,CAED,OAAO,CAAC,iBAAiB,EAAE,UAAU,UAAU,EAAE,EAAE,EAAE,YAAY,EAAE,SAAS,EAAE;AAC7E,SAAO;;AAEL,WAAO,EAAE,iBAAU,MAAM,EAAE;AACzB,YAAM,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,IAAI,EAAE,CAAC;AACtC,UAAI,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;AAC7B,cAAM,CAAC,OAAO,CAAC,aAAa,GAAG,SAAS,GAAG,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;OACtE;AACD,aAAO,MAAM,CAAC;KACf;;;AAGD,iBAAa,EAAE,uBAAS,QAAQ,EAAE;AAChC,UAAG,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE;AAC1B,iBAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;;AAEzB,oBAAY,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AAC7B,eAAO,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;OAC5B,MACI;AACH,eAAO,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;OAC5B;KACF;GACF,CAAC;CACH,CAAC,CAED,GAAG,CAAC,UAAU,UAAU,EAAE,SAAS,EAAE,IAAI,EAAE;;AAE1C,YAAU,CAAC,GAAG,CAAC,mBAAmB,EAAE,UAAU,KAAK,EAAE,IAAI,EAAE;AACzD,QAAI,CAAC,eAAe,CAAC,UAAS,QAAQ,EAAE;AACtC,UAAI,IAAI,CAAC,YAAY,IAAI,CAAC,QAAQ,EAAE;AAClC,aAAK,CAAC,cAAc,EAAE,CAAC;AACvB,iBAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;OAC1B;KACF,CAAC,CAAC;GACJ,CAAC,CAAC;CACJ,CAAC,CAAC","file":"app.js","sourcesContent":["'use strict';\n\nangular.module('xinyixianApp', [\n  'ngCookies',\n  'ngResource',\n  'ngSanitize',\n  'btford.socket-io',\n  'ui.router',\n  'ui.bootstrap'\n])\n  .config(function ($stateProvider, $urlRouterProvider, $locationProvider, $httpProvider) {\n    $urlRouterProvider\n      .otherwise('/');\n\n    $locationProvider.html5Mode(true);\n    $httpProvider.interceptors.push('authInterceptor');\n  })\n\n  .factory('authInterceptor', function ($rootScope, $q, $cookieStore, $location) {\n    return {\n      // Add authorization token to headers\n      request: function (config) {\n        config.headers = config.headers || {};\n        if ($cookieStore.get('token')) {\n          config.headers.Authorization = 'Bearer ' + $cookieStore.get('token');\n        }\n        return config;\n      },\n\n      // Intercept 401s and redirect you to login\n      responseError: function(response) {\n        if(response.status === 401) {\n          $location.path('/login');\n          // remove any stale tokens\n          $cookieStore.remove('token');\n          return $q.reject(response);\n        }\n        else {\n          return $q.reject(response);\n        }\n      }\n    };\n  })\n\n  .run(function ($rootScope, $location, Auth) {\n    // Redirect to login if route requires auth and you're not logged in\n    $rootScope.$on('$stateChangeStart', function (event, next) {\n      Auth.isLoggedInAsync(function(loggedIn) {\n        if (next.authenticate && !loggedIn) {\n          event.preventDefault();\n          $location.path('/login');\n        }\n      });\n    });\n  });\n"]}